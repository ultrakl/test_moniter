// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net_info.proto

#include "net_info.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace monitor {
namespace proto {
        template <typename>
PROTOBUF_CONSTEXPR NetInfo::NetInfo(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.send_rate_)*/ 0,
      /*decltype(_impl_.rcv_rate_)*/ 0,
      /*decltype(_impl_.send_packets_rate_)*/ 0,
      /*decltype(_impl_.rcv_packets_rate_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct NetInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetInfoDefaultTypeInternal() {}
  union {
    NetInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetInfoDefaultTypeInternal _NetInfo_default_instance_;
}  // namespace proto
}  // namespace monitor
static ::_pb::Metadata file_level_metadata_net_5finfo_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_net_5finfo_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_net_5finfo_2eproto = nullptr;
const ::uint32_t TableStruct_net_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::monitor::proto::NetInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::monitor::proto::NetInfo, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::monitor::proto::NetInfo, _impl_.send_rate_),
    PROTOBUF_FIELD_OFFSET(::monitor::proto::NetInfo, _impl_.rcv_rate_),
    PROTOBUF_FIELD_OFFSET(::monitor::proto::NetInfo, _impl_.send_packets_rate_),
    PROTOBUF_FIELD_OFFSET(::monitor::proto::NetInfo, _impl_.rcv_packets_rate_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::monitor::proto::NetInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::monitor::proto::_NetInfo_default_instance_._instance,
};
const char descriptor_table_protodef_net_5finfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\016net_info.proto\022\rmonitor.proto\"q\n\007NetIn"
    "fo\022\014\n\004name\030\001 \001(\t\022\021\n\tsend_rate\030\002 \001(\002\022\020\n\010r"
    "cv_rate\030\003 \001(\002\022\031\n\021send_packets_rate\030\004 \001(\002"
    "\022\030\n\020rcv_packets_rate\030\005 \001(\002b\006proto3"
};
static ::absl::once_flag descriptor_table_net_5finfo_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_net_5finfo_2eproto = {
    false,
    false,
    154,
    descriptor_table_protodef_net_5finfo_2eproto,
    "net_info.proto",
    &descriptor_table_net_5finfo_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_net_5finfo_2eproto::offsets,
    file_level_metadata_net_5finfo_2eproto,
    file_level_enum_descriptors_net_5finfo_2eproto,
    file_level_service_descriptors_net_5finfo_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_net_5finfo_2eproto_getter() {
  return &descriptor_table_net_5finfo_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_net_5finfo_2eproto(&descriptor_table_net_5finfo_2eproto);
namespace monitor {
namespace proto {
// ===================================================================

class NetInfo::_Internal {
 public:
};

NetInfo::NetInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:monitor.proto.NetInfo)
}
NetInfo::NetInfo(const NetInfo& from) : ::google::protobuf::Message() {
  NetInfo* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){},
      decltype(_impl_.send_rate_){},
      decltype(_impl_.rcv_rate_){},
      decltype(_impl_.send_packets_rate_){},
      decltype(_impl_.rcv_packets_rate_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.send_rate_, &from._impl_.send_rate_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.rcv_packets_rate_) -
    reinterpret_cast<char*>(&_impl_.send_rate_)) + sizeof(_impl_.rcv_packets_rate_));

  // @@protoc_insertion_point(copy_constructor:monitor.proto.NetInfo)
}
inline void NetInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){},
      decltype(_impl_.send_rate_){0},
      decltype(_impl_.rcv_rate_){0},
      decltype(_impl_.send_packets_rate_){0},
      decltype(_impl_.rcv_packets_rate_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
NetInfo::~NetInfo() {
  // @@protoc_insertion_point(destructor:monitor.proto.NetInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void NetInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}
void NetInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void NetInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:monitor.proto.NetInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.send_rate_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.rcv_packets_rate_) -
      reinterpret_cast<char*>(&_impl_.send_rate_)) + sizeof(_impl_.rcv_packets_rate_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* NetInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 34, 2> NetInfo::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_NetInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(NetInfo, _impl_.name_)}},
    // float send_rate = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(NetInfo, _impl_.send_rate_)}},
    // float rcv_rate = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(NetInfo, _impl_.rcv_rate_)}},
    // float send_packets_rate = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(NetInfo, _impl_.send_packets_rate_)}},
    // float rcv_packets_rate = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(NetInfo, _impl_.rcv_packets_rate_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(NetInfo, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // float send_rate = 2;
    {PROTOBUF_FIELD_OFFSET(NetInfo, _impl_.send_rate_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float rcv_rate = 3;
    {PROTOBUF_FIELD_OFFSET(NetInfo, _impl_.rcv_rate_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float send_packets_rate = 4;
    {PROTOBUF_FIELD_OFFSET(NetInfo, _impl_.send_packets_rate_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float rcv_packets_rate = 5;
    {PROTOBUF_FIELD_OFFSET(NetInfo, _impl_.rcv_packets_rate_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
    "\25\4\0\0\0\0\0\0"
    "monitor.proto.NetInfo"
    "name"
  }},
};

::uint8_t* NetInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:monitor.proto.NetInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "monitor.proto.NetInfo.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // float send_rate = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_send_rate = this->_internal_send_rate();
  ::uint32_t raw_send_rate;
  memcpy(&raw_send_rate, &tmp_send_rate, sizeof(tmp_send_rate));
  if (raw_send_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_send_rate(), target);
  }

  // float rcv_rate = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_rcv_rate = this->_internal_rcv_rate();
  ::uint32_t raw_rcv_rate;
  memcpy(&raw_rcv_rate, &tmp_rcv_rate, sizeof(tmp_rcv_rate));
  if (raw_rcv_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_rcv_rate(), target);
  }

  // float send_packets_rate = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_send_packets_rate = this->_internal_send_packets_rate();
  ::uint32_t raw_send_packets_rate;
  memcpy(&raw_send_packets_rate, &tmp_send_packets_rate, sizeof(tmp_send_packets_rate));
  if (raw_send_packets_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_send_packets_rate(), target);
  }

  // float rcv_packets_rate = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_rcv_packets_rate = this->_internal_rcv_packets_rate();
  ::uint32_t raw_rcv_packets_rate;
  memcpy(&raw_rcv_packets_rate, &tmp_rcv_packets_rate, sizeof(tmp_rcv_packets_rate));
  if (raw_rcv_packets_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_rcv_packets_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:monitor.proto.NetInfo)
  return target;
}

::size_t NetInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:monitor.proto.NetInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // float send_rate = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_send_rate = this->_internal_send_rate();
  ::uint32_t raw_send_rate;
  memcpy(&raw_send_rate, &tmp_send_rate, sizeof(tmp_send_rate));
  if (raw_send_rate != 0) {
    total_size += 5;
  }

  // float rcv_rate = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_rcv_rate = this->_internal_rcv_rate();
  ::uint32_t raw_rcv_rate;
  memcpy(&raw_rcv_rate, &tmp_rcv_rate, sizeof(tmp_rcv_rate));
  if (raw_rcv_rate != 0) {
    total_size += 5;
  }

  // float send_packets_rate = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_send_packets_rate = this->_internal_send_packets_rate();
  ::uint32_t raw_send_packets_rate;
  memcpy(&raw_send_packets_rate, &tmp_send_packets_rate, sizeof(tmp_send_packets_rate));
  if (raw_send_packets_rate != 0) {
    total_size += 5;
  }

  // float rcv_packets_rate = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_rcv_packets_rate = this->_internal_rcv_packets_rate();
  ::uint32_t raw_rcv_packets_rate;
  memcpy(&raw_rcv_packets_rate, &tmp_rcv_packets_rate, sizeof(tmp_rcv_packets_rate));
  if (raw_rcv_packets_rate != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData NetInfo::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    NetInfo::MergeImpl
};
const ::google::protobuf::Message::ClassData*NetInfo::GetClassData() const { return &_class_data_; }


void NetInfo::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<NetInfo*>(&to_msg);
  auto& from = static_cast<const NetInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:monitor.proto.NetInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_send_rate = from._internal_send_rate();
  ::uint32_t raw_send_rate;
  memcpy(&raw_send_rate, &tmp_send_rate, sizeof(tmp_send_rate));
  if (raw_send_rate != 0) {
    _this->_internal_set_send_rate(from._internal_send_rate());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_rcv_rate = from._internal_rcv_rate();
  ::uint32_t raw_rcv_rate;
  memcpy(&raw_rcv_rate, &tmp_rcv_rate, sizeof(tmp_rcv_rate));
  if (raw_rcv_rate != 0) {
    _this->_internal_set_rcv_rate(from._internal_rcv_rate());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_send_packets_rate = from._internal_send_packets_rate();
  ::uint32_t raw_send_packets_rate;
  memcpy(&raw_send_packets_rate, &tmp_send_packets_rate, sizeof(tmp_send_packets_rate));
  if (raw_send_packets_rate != 0) {
    _this->_internal_set_send_packets_rate(from._internal_send_packets_rate());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_rcv_packets_rate = from._internal_rcv_packets_rate();
  ::uint32_t raw_rcv_packets_rate;
  memcpy(&raw_rcv_packets_rate, &tmp_rcv_packets_rate, sizeof(tmp_rcv_packets_rate));
  if (raw_rcv_packets_rate != 0) {
    _this->_internal_set_rcv_packets_rate(from._internal_rcv_packets_rate());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NetInfo::CopyFrom(const NetInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:monitor.proto.NetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool NetInfo::IsInitialized() const {
  return true;
}

void NetInfo::InternalSwap(NetInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetInfo, _impl_.rcv_packets_rate_)
      + sizeof(NetInfo::_impl_.rcv_packets_rate_)
      - PROTOBUF_FIELD_OFFSET(NetInfo, _impl_.send_rate_)>(
          reinterpret_cast<char*>(&_impl_.send_rate_),
          reinterpret_cast<char*>(&other->_impl_.send_rate_));
}

::google::protobuf::Metadata NetInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_5finfo_2eproto_getter, &descriptor_table_net_5finfo_2eproto_once,
      file_level_metadata_net_5finfo_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace monitor
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
