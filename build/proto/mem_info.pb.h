// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mem_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mem_5finfo_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_mem_5finfo_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024002 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_mem_5finfo_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_mem_5finfo_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_mem_5finfo_2eproto;
namespace monitor {
namespace proto {
class MemInfo;
struct MemInfoDefaultTypeInternal;
extern MemInfoDefaultTypeInternal _MemInfo_default_instance_;
}  // namespace proto
}  // namespace monitor
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace monitor {
namespace proto {

// ===================================================================


// -------------------------------------------------------------------

class MemInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:monitor.proto.MemInfo) */ {
 public:
  inline MemInfo() : MemInfo(nullptr) {}
  ~MemInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MemInfo(::google::protobuf::internal::ConstantInitialized);

  MemInfo(const MemInfo& from);
  MemInfo(MemInfo&& from) noexcept
    : MemInfo() {
    *this = ::std::move(from);
  }

  inline MemInfo& operator=(const MemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemInfo& operator=(MemInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MemInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemInfo* internal_default_instance() {
    return reinterpret_cast<const MemInfo*>(
               &_MemInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MemInfo& a, MemInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MemInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MemInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MemInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MemInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MemInfo& from) {
    MemInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "monitor.proto.MemInfo";
  }
  protected:
  explicit MemInfo(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalFieldNumber = 1,
    kFreeFieldNumber = 2,
    kAvailFieldNumber = 3,
    kBuffersFieldNumber = 4,
    kCachedFieldNumber = 5,
    kSwapCachedFieldNumber = 6,
    kActiveFieldNumber = 7,
    kInactiveFieldNumber = 8,
    kActiveAnonFieldNumber = 9,
    kInactiveAnonFieldNumber = 10,
    kActiveFileFieldNumber = 11,
    kInactiveFileFieldNumber = 12,
    kDirtyFieldNumber = 13,
    kWritebackFieldNumber = 14,
    kAnonPagesFieldNumber = 15,
    kMappedFieldNumber = 16,
    kKReclaimableFieldNumber = 17,
    kSReclaimableFieldNumber = 18,
    kSUnreclaimFieldNumber = 19,
    kUsedPercentFieldNumber = 31,
  };
  // float total = 1;
  void clear_total() ;
  float total() const;
  void set_total(float value);

  private:
  float _internal_total() const;
  void _internal_set_total(float value);

  public:
  // float free = 2;
  void clear_free() ;
  float free() const;
  void set_free(float value);

  private:
  float _internal_free() const;
  void _internal_set_free(float value);

  public:
  // float avail = 3;
  void clear_avail() ;
  float avail() const;
  void set_avail(float value);

  private:
  float _internal_avail() const;
  void _internal_set_avail(float value);

  public:
  // float buffers = 4;
  void clear_buffers() ;
  float buffers() const;
  void set_buffers(float value);

  private:
  float _internal_buffers() const;
  void _internal_set_buffers(float value);

  public:
  // float cached = 5;
  void clear_cached() ;
  float cached() const;
  void set_cached(float value);

  private:
  float _internal_cached() const;
  void _internal_set_cached(float value);

  public:
  // float swap_cached = 6;
  void clear_swap_cached() ;
  float swap_cached() const;
  void set_swap_cached(float value);

  private:
  float _internal_swap_cached() const;
  void _internal_set_swap_cached(float value);

  public:
  // float active = 7;
  void clear_active() ;
  float active() const;
  void set_active(float value);

  private:
  float _internal_active() const;
  void _internal_set_active(float value);

  public:
  // float inactive = 8;
  void clear_inactive() ;
  float inactive() const;
  void set_inactive(float value);

  private:
  float _internal_inactive() const;
  void _internal_set_inactive(float value);

  public:
  // float active_anon = 9;
  void clear_active_anon() ;
  float active_anon() const;
  void set_active_anon(float value);

  private:
  float _internal_active_anon() const;
  void _internal_set_active_anon(float value);

  public:
  // float inactive_anon = 10;
  void clear_inactive_anon() ;
  float inactive_anon() const;
  void set_inactive_anon(float value);

  private:
  float _internal_inactive_anon() const;
  void _internal_set_inactive_anon(float value);

  public:
  // float active_file = 11;
  void clear_active_file() ;
  float active_file() const;
  void set_active_file(float value);

  private:
  float _internal_active_file() const;
  void _internal_set_active_file(float value);

  public:
  // float inactive_file = 12;
  void clear_inactive_file() ;
  float inactive_file() const;
  void set_inactive_file(float value);

  private:
  float _internal_inactive_file() const;
  void _internal_set_inactive_file(float value);

  public:
  // float dirty = 13;
  void clear_dirty() ;
  float dirty() const;
  void set_dirty(float value);

  private:
  float _internal_dirty() const;
  void _internal_set_dirty(float value);

  public:
  // float writeback = 14;
  void clear_writeback() ;
  float writeback() const;
  void set_writeback(float value);

  private:
  float _internal_writeback() const;
  void _internal_set_writeback(float value);

  public:
  // float anon_pages = 15;
  void clear_anon_pages() ;
  float anon_pages() const;
  void set_anon_pages(float value);

  private:
  float _internal_anon_pages() const;
  void _internal_set_anon_pages(float value);

  public:
  // float mapped = 16;
  void clear_mapped() ;
  float mapped() const;
  void set_mapped(float value);

  private:
  float _internal_mapped() const;
  void _internal_set_mapped(float value);

  public:
  // float kReclaimable = 17;
  void clear_kreclaimable() ;
  float kreclaimable() const;
  void set_kreclaimable(float value);

  private:
  float _internal_kreclaimable() const;
  void _internal_set_kreclaimable(float value);

  public:
  // float sReclaimable = 18;
  void clear_sreclaimable() ;
  float sreclaimable() const;
  void set_sreclaimable(float value);

  private:
  float _internal_sreclaimable() const;
  void _internal_set_sreclaimable(float value);

  public:
  // float sUnreclaim = 19;
  void clear_sunreclaim() ;
  float sunreclaim() const;
  void set_sunreclaim(float value);

  private:
  float _internal_sunreclaim() const;
  void _internal_set_sunreclaim(float value);

  public:
  // float used_percent = 31;
  void clear_used_percent() ;
  float used_percent() const;
  void set_used_percent(float value);

  private:
  float _internal_used_percent() const;
  void _internal_set_used_percent(float value);

  public:
  // @@protoc_insertion_point(class_scope:monitor.proto.MemInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<5, 20, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float total_;
    float free_;
    float avail_;
    float buffers_;
    float cached_;
    float swap_cached_;
    float active_;
    float inactive_;
    float active_anon_;
    float inactive_anon_;
    float active_file_;
    float inactive_file_;
    float dirty_;
    float writeback_;
    float anon_pages_;
    float mapped_;
    float kreclaimable_;
    float sreclaimable_;
    float sunreclaim_;
    float used_percent_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mem_5finfo_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MemInfo

// float total = 1;
inline void MemInfo::clear_total() {
  _impl_.total_ = 0;
}
inline float MemInfo::total() const {
  // @@protoc_insertion_point(field_get:monitor.proto.MemInfo.total)
  return _internal_total();
}
inline void MemInfo::set_total(float value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:monitor.proto.MemInfo.total)
}
inline float MemInfo::_internal_total() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.total_;
}
inline void MemInfo::_internal_set_total(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.total_ = value;
}

// float free = 2;
inline void MemInfo::clear_free() {
  _impl_.free_ = 0;
}
inline float MemInfo::free() const {
  // @@protoc_insertion_point(field_get:monitor.proto.MemInfo.free)
  return _internal_free();
}
inline void MemInfo::set_free(float value) {
  _internal_set_free(value);
  // @@protoc_insertion_point(field_set:monitor.proto.MemInfo.free)
}
inline float MemInfo::_internal_free() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.free_;
}
inline void MemInfo::_internal_set_free(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.free_ = value;
}

// float avail = 3;
inline void MemInfo::clear_avail() {
  _impl_.avail_ = 0;
}
inline float MemInfo::avail() const {
  // @@protoc_insertion_point(field_get:monitor.proto.MemInfo.avail)
  return _internal_avail();
}
inline void MemInfo::set_avail(float value) {
  _internal_set_avail(value);
  // @@protoc_insertion_point(field_set:monitor.proto.MemInfo.avail)
}
inline float MemInfo::_internal_avail() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.avail_;
}
inline void MemInfo::_internal_set_avail(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.avail_ = value;
}

// float buffers = 4;
inline void MemInfo::clear_buffers() {
  _impl_.buffers_ = 0;
}
inline float MemInfo::buffers() const {
  // @@protoc_insertion_point(field_get:monitor.proto.MemInfo.buffers)
  return _internal_buffers();
}
inline void MemInfo::set_buffers(float value) {
  _internal_set_buffers(value);
  // @@protoc_insertion_point(field_set:monitor.proto.MemInfo.buffers)
}
inline float MemInfo::_internal_buffers() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.buffers_;
}
inline void MemInfo::_internal_set_buffers(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.buffers_ = value;
}

// float cached = 5;
inline void MemInfo::clear_cached() {
  _impl_.cached_ = 0;
}
inline float MemInfo::cached() const {
  // @@protoc_insertion_point(field_get:monitor.proto.MemInfo.cached)
  return _internal_cached();
}
inline void MemInfo::set_cached(float value) {
  _internal_set_cached(value);
  // @@protoc_insertion_point(field_set:monitor.proto.MemInfo.cached)
}
inline float MemInfo::_internal_cached() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cached_;
}
inline void MemInfo::_internal_set_cached(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cached_ = value;
}

// float swap_cached = 6;
inline void MemInfo::clear_swap_cached() {
  _impl_.swap_cached_ = 0;
}
inline float MemInfo::swap_cached() const {
  // @@protoc_insertion_point(field_get:monitor.proto.MemInfo.swap_cached)
  return _internal_swap_cached();
}
inline void MemInfo::set_swap_cached(float value) {
  _internal_set_swap_cached(value);
  // @@protoc_insertion_point(field_set:monitor.proto.MemInfo.swap_cached)
}
inline float MemInfo::_internal_swap_cached() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.swap_cached_;
}
inline void MemInfo::_internal_set_swap_cached(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.swap_cached_ = value;
}

// float active = 7;
inline void MemInfo::clear_active() {
  _impl_.active_ = 0;
}
inline float MemInfo::active() const {
  // @@protoc_insertion_point(field_get:monitor.proto.MemInfo.active)
  return _internal_active();
}
inline void MemInfo::set_active(float value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:monitor.proto.MemInfo.active)
}
inline float MemInfo::_internal_active() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.active_;
}
inline void MemInfo::_internal_set_active(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.active_ = value;
}

// float inactive = 8;
inline void MemInfo::clear_inactive() {
  _impl_.inactive_ = 0;
}
inline float MemInfo::inactive() const {
  // @@protoc_insertion_point(field_get:monitor.proto.MemInfo.inactive)
  return _internal_inactive();
}
inline void MemInfo::set_inactive(float value) {
  _internal_set_inactive(value);
  // @@protoc_insertion_point(field_set:monitor.proto.MemInfo.inactive)
}
inline float MemInfo::_internal_inactive() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.inactive_;
}
inline void MemInfo::_internal_set_inactive(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.inactive_ = value;
}

// float active_anon = 9;
inline void MemInfo::clear_active_anon() {
  _impl_.active_anon_ = 0;
}
inline float MemInfo::active_anon() const {
  // @@protoc_insertion_point(field_get:monitor.proto.MemInfo.active_anon)
  return _internal_active_anon();
}
inline void MemInfo::set_active_anon(float value) {
  _internal_set_active_anon(value);
  // @@protoc_insertion_point(field_set:monitor.proto.MemInfo.active_anon)
}
inline float MemInfo::_internal_active_anon() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.active_anon_;
}
inline void MemInfo::_internal_set_active_anon(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.active_anon_ = value;
}

// float inactive_anon = 10;
inline void MemInfo::clear_inactive_anon() {
  _impl_.inactive_anon_ = 0;
}
inline float MemInfo::inactive_anon() const {
  // @@protoc_insertion_point(field_get:monitor.proto.MemInfo.inactive_anon)
  return _internal_inactive_anon();
}
inline void MemInfo::set_inactive_anon(float value) {
  _internal_set_inactive_anon(value);
  // @@protoc_insertion_point(field_set:monitor.proto.MemInfo.inactive_anon)
}
inline float MemInfo::_internal_inactive_anon() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.inactive_anon_;
}
inline void MemInfo::_internal_set_inactive_anon(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.inactive_anon_ = value;
}

// float active_file = 11;
inline void MemInfo::clear_active_file() {
  _impl_.active_file_ = 0;
}
inline float MemInfo::active_file() const {
  // @@protoc_insertion_point(field_get:monitor.proto.MemInfo.active_file)
  return _internal_active_file();
}
inline void MemInfo::set_active_file(float value) {
  _internal_set_active_file(value);
  // @@protoc_insertion_point(field_set:monitor.proto.MemInfo.active_file)
}
inline float MemInfo::_internal_active_file() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.active_file_;
}
inline void MemInfo::_internal_set_active_file(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.active_file_ = value;
}

// float inactive_file = 12;
inline void MemInfo::clear_inactive_file() {
  _impl_.inactive_file_ = 0;
}
inline float MemInfo::inactive_file() const {
  // @@protoc_insertion_point(field_get:monitor.proto.MemInfo.inactive_file)
  return _internal_inactive_file();
}
inline void MemInfo::set_inactive_file(float value) {
  _internal_set_inactive_file(value);
  // @@protoc_insertion_point(field_set:monitor.proto.MemInfo.inactive_file)
}
inline float MemInfo::_internal_inactive_file() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.inactive_file_;
}
inline void MemInfo::_internal_set_inactive_file(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.inactive_file_ = value;
}

// float dirty = 13;
inline void MemInfo::clear_dirty() {
  _impl_.dirty_ = 0;
}
inline float MemInfo::dirty() const {
  // @@protoc_insertion_point(field_get:monitor.proto.MemInfo.dirty)
  return _internal_dirty();
}
inline void MemInfo::set_dirty(float value) {
  _internal_set_dirty(value);
  // @@protoc_insertion_point(field_set:monitor.proto.MemInfo.dirty)
}
inline float MemInfo::_internal_dirty() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.dirty_;
}
inline void MemInfo::_internal_set_dirty(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.dirty_ = value;
}

// float writeback = 14;
inline void MemInfo::clear_writeback() {
  _impl_.writeback_ = 0;
}
inline float MemInfo::writeback() const {
  // @@protoc_insertion_point(field_get:monitor.proto.MemInfo.writeback)
  return _internal_writeback();
}
inline void MemInfo::set_writeback(float value) {
  _internal_set_writeback(value);
  // @@protoc_insertion_point(field_set:monitor.proto.MemInfo.writeback)
}
inline float MemInfo::_internal_writeback() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.writeback_;
}
inline void MemInfo::_internal_set_writeback(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.writeback_ = value;
}

// float anon_pages = 15;
inline void MemInfo::clear_anon_pages() {
  _impl_.anon_pages_ = 0;
}
inline float MemInfo::anon_pages() const {
  // @@protoc_insertion_point(field_get:monitor.proto.MemInfo.anon_pages)
  return _internal_anon_pages();
}
inline void MemInfo::set_anon_pages(float value) {
  _internal_set_anon_pages(value);
  // @@protoc_insertion_point(field_set:monitor.proto.MemInfo.anon_pages)
}
inline float MemInfo::_internal_anon_pages() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.anon_pages_;
}
inline void MemInfo::_internal_set_anon_pages(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.anon_pages_ = value;
}

// float mapped = 16;
inline void MemInfo::clear_mapped() {
  _impl_.mapped_ = 0;
}
inline float MemInfo::mapped() const {
  // @@protoc_insertion_point(field_get:monitor.proto.MemInfo.mapped)
  return _internal_mapped();
}
inline void MemInfo::set_mapped(float value) {
  _internal_set_mapped(value);
  // @@protoc_insertion_point(field_set:monitor.proto.MemInfo.mapped)
}
inline float MemInfo::_internal_mapped() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mapped_;
}
inline void MemInfo::_internal_set_mapped(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.mapped_ = value;
}

// float kReclaimable = 17;
inline void MemInfo::clear_kreclaimable() {
  _impl_.kreclaimable_ = 0;
}
inline float MemInfo::kreclaimable() const {
  // @@protoc_insertion_point(field_get:monitor.proto.MemInfo.kReclaimable)
  return _internal_kreclaimable();
}
inline void MemInfo::set_kreclaimable(float value) {
  _internal_set_kreclaimable(value);
  // @@protoc_insertion_point(field_set:monitor.proto.MemInfo.kReclaimable)
}
inline float MemInfo::_internal_kreclaimable() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.kreclaimable_;
}
inline void MemInfo::_internal_set_kreclaimable(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.kreclaimable_ = value;
}

// float sReclaimable = 18;
inline void MemInfo::clear_sreclaimable() {
  _impl_.sreclaimable_ = 0;
}
inline float MemInfo::sreclaimable() const {
  // @@protoc_insertion_point(field_get:monitor.proto.MemInfo.sReclaimable)
  return _internal_sreclaimable();
}
inline void MemInfo::set_sreclaimable(float value) {
  _internal_set_sreclaimable(value);
  // @@protoc_insertion_point(field_set:monitor.proto.MemInfo.sReclaimable)
}
inline float MemInfo::_internal_sreclaimable() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sreclaimable_;
}
inline void MemInfo::_internal_set_sreclaimable(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sreclaimable_ = value;
}

// float sUnreclaim = 19;
inline void MemInfo::clear_sunreclaim() {
  _impl_.sunreclaim_ = 0;
}
inline float MemInfo::sunreclaim() const {
  // @@protoc_insertion_point(field_get:monitor.proto.MemInfo.sUnreclaim)
  return _internal_sunreclaim();
}
inline void MemInfo::set_sunreclaim(float value) {
  _internal_set_sunreclaim(value);
  // @@protoc_insertion_point(field_set:monitor.proto.MemInfo.sUnreclaim)
}
inline float MemInfo::_internal_sunreclaim() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sunreclaim_;
}
inline void MemInfo::_internal_set_sunreclaim(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sunreclaim_ = value;
}

// float used_percent = 31;
inline void MemInfo::clear_used_percent() {
  _impl_.used_percent_ = 0;
}
inline float MemInfo::used_percent() const {
  // @@protoc_insertion_point(field_get:monitor.proto.MemInfo.used_percent)
  return _internal_used_percent();
}
inline void MemInfo::set_used_percent(float value) {
  _internal_set_used_percent(value);
  // @@protoc_insertion_point(field_set:monitor.proto.MemInfo.used_percent)
}
inline float MemInfo::_internal_used_percent() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.used_percent_;
}
inline void MemInfo::_internal_set_used_percent(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.used_percent_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace monitor


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_mem_5finfo_2eproto_2epb_2eh
