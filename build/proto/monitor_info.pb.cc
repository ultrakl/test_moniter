// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: monitor_info.proto

#include "monitor_info.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace monitor {
namespace proto {
        template <typename>
PROTOBUF_CONSTEXPR MonitorInfo::MonitorInfo(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.soft_irq_)*/ {},
      /*decltype(_impl_.cpu_stat_)*/ {},
      /*decltype(_impl_.net_info_)*/ {},
      /*decltype(_impl_.name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.cpu_load_)*/ nullptr,
      /*decltype(_impl_.mem_info_)*/ nullptr,
    } {}
struct MonitorInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MonitorInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MonitorInfoDefaultTypeInternal() {}
  union {
    MonitorInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MonitorInfoDefaultTypeInternal _MonitorInfo_default_instance_;
}  // namespace proto
}  // namespace monitor
static ::_pb::Metadata file_level_metadata_monitor_5finfo_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_monitor_5finfo_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_monitor_5finfo_2eproto = nullptr;
const ::uint32_t TableStruct_monitor_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::monitor::proto::MonitorInfo, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::monitor::proto::MonitorInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::monitor::proto::MonitorInfo, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::monitor::proto::MonitorInfo, _impl_.soft_irq_),
    PROTOBUF_FIELD_OFFSET(::monitor::proto::MonitorInfo, _impl_.cpu_load_),
    PROTOBUF_FIELD_OFFSET(::monitor::proto::MonitorInfo, _impl_.cpu_stat_),
    PROTOBUF_FIELD_OFFSET(::monitor::proto::MonitorInfo, _impl_.mem_info_),
    PROTOBUF_FIELD_OFFSET(::monitor::proto::MonitorInfo, _impl_.net_info_),
    ~0u,
    ~0u,
    0,
    ~0u,
    1,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 14, -1, sizeof(::monitor::proto::MonitorInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::monitor::proto::_MonitorInfo_default_instance_._instance,
};
const char descriptor_table_protodef_monitor_5finfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\022monitor_info.proto\022\rmonitor.proto\032\033goo"
    "gle/protobuf/empty.proto\032\016net_info.proto"
    "\032\016mem_info.proto\032\016cpu_stat.proto\032\021cpu_so"
    "ftirq.proto\032\016cpu_load.proto\"\355\001\n\013MonitorI"
    "nfo\022\014\n\004name\030\001 \001(\t\022(\n\010soft_irq\030\004 \003(\0132\026.mo"
    "nitor.proto.SoftIrq\022(\n\010cpu_load\030\005 \001(\0132\026."
    "monitor.proto.CpuLoad\022(\n\010cpu_stat\030\006 \003(\0132"
    "\026.monitor.proto.CpuStat\022(\n\010mem_info\030\007 \001("
    "\0132\026.monitor.proto.MemInfo\022(\n\010net_info\030\010 "
    "\003(\0132\026.monitor.proto.NetInfo2\235\001\n\013GrpcMana"
    "ger\022F\n\016SetMonitorInfo\022\032.monitor.proto.Mo"
    "nitorInfo\032\026.google.protobuf.Empty\"\000\022F\n\016G"
    "etMonitorInfo\022\026.google.protobuf.Empty\032\032."
    "monitor.proto.MonitorInfo\"\000b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_monitor_5finfo_2eproto_deps[6] =
    {
        &::descriptor_table_cpu_5fload_2eproto,
        &::descriptor_table_cpu_5fsoftirq_2eproto,
        &::descriptor_table_cpu_5fstat_2eproto,
        &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
        &::descriptor_table_mem_5finfo_2eproto,
        &::descriptor_table_net_5finfo_2eproto,
};
static ::absl::once_flag descriptor_table_monitor_5finfo_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_monitor_5finfo_2eproto = {
    false,
    false,
    555,
    descriptor_table_protodef_monitor_5finfo_2eproto,
    "monitor_info.proto",
    &descriptor_table_monitor_5finfo_2eproto_once,
    descriptor_table_monitor_5finfo_2eproto_deps,
    6,
    1,
    schemas,
    file_default_instances,
    TableStruct_monitor_5finfo_2eproto::offsets,
    file_level_metadata_monitor_5finfo_2eproto,
    file_level_enum_descriptors_monitor_5finfo_2eproto,
    file_level_service_descriptors_monitor_5finfo_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_monitor_5finfo_2eproto_getter() {
  return &descriptor_table_monitor_5finfo_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_monitor_5finfo_2eproto(&descriptor_table_monitor_5finfo_2eproto);
namespace monitor {
namespace proto {
// ===================================================================

class MonitorInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<MonitorInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MonitorInfo, _impl_._has_bits_);
  static const ::monitor::proto::CpuLoad& cpu_load(const MonitorInfo* msg);
  static void set_has_cpu_load(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::monitor::proto::MemInfo& mem_info(const MonitorInfo* msg);
  static void set_has_mem_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::monitor::proto::CpuLoad& MonitorInfo::_Internal::cpu_load(const MonitorInfo* msg) {
  return *msg->_impl_.cpu_load_;
}
const ::monitor::proto::MemInfo& MonitorInfo::_Internal::mem_info(const MonitorInfo* msg) {
  return *msg->_impl_.mem_info_;
}
void MonitorInfo::clear_soft_irq() {
  _internal_mutable_soft_irq()->Clear();
}
void MonitorInfo::clear_cpu_load() {
  if (_impl_.cpu_load_ != nullptr) _impl_.cpu_load_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void MonitorInfo::clear_cpu_stat() {
  _internal_mutable_cpu_stat()->Clear();
}
void MonitorInfo::clear_mem_info() {
  if (_impl_.mem_info_ != nullptr) _impl_.mem_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void MonitorInfo::clear_net_info() {
  _internal_mutable_net_info()->Clear();
}
MonitorInfo::MonitorInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:monitor.proto.MonitorInfo)
}
MonitorInfo::MonitorInfo(const MonitorInfo& from) : ::google::protobuf::Message() {
  MonitorInfo* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.soft_irq_){from._impl_.soft_irq_},
      decltype(_impl_.cpu_stat_){from._impl_.cpu_stat_},
      decltype(_impl_.net_info_){from._impl_.net_info_},
      decltype(_impl_.name_){},
      decltype(_impl_.cpu_load_){nullptr},
      decltype(_impl_.mem_info_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.cpu_load_ = new ::monitor::proto::CpuLoad(*from._impl_.cpu_load_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.mem_info_ = new ::monitor::proto::MemInfo(*from._impl_.mem_info_);
  }

  // @@protoc_insertion_point(copy_constructor:monitor.proto.MonitorInfo)
}
inline void MonitorInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.soft_irq_){arena},
      decltype(_impl_.cpu_stat_){arena},
      decltype(_impl_.net_info_){arena},
      decltype(_impl_.name_){},
      decltype(_impl_.cpu_load_){nullptr},
      decltype(_impl_.mem_info_){nullptr},
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
MonitorInfo::~MonitorInfo() {
  // @@protoc_insertion_point(destructor:monitor.proto.MonitorInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MonitorInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.soft_irq_.~RepeatedPtrField();
  _impl_.cpu_stat_.~RepeatedPtrField();
  _impl_.net_info_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.cpu_load_;
  if (this != internal_default_instance()) delete _impl_.mem_info_;
}
void MonitorInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void MonitorInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:monitor.proto.MonitorInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_soft_irq()->Clear();
  _internal_mutable_cpu_stat()->Clear();
  _internal_mutable_net_info()->Clear();
  _impl_.name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.cpu_load_ != nullptr);
      _impl_.cpu_load_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.mem_info_ != nullptr);
      _impl_.mem_info_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MonitorInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 5, 38, 2> MonitorInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MonitorInfo, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967046,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MonitorInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .monitor.proto.NetInfo net_info = 8;
    {::_pbi::TcParser::FastMtR1,
     {66, 63, 4, PROTOBUF_FIELD_OFFSET(MonitorInfo, _impl_.net_info_)}},
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MonitorInfo, _impl_.name_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .monitor.proto.SoftIrq soft_irq = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(MonitorInfo, _impl_.soft_irq_)}},
    // .monitor.proto.CpuLoad cpu_load = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 0, 1, PROTOBUF_FIELD_OFFSET(MonitorInfo, _impl_.cpu_load_)}},
    // repeated .monitor.proto.CpuStat cpu_stat = 6;
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 2, PROTOBUF_FIELD_OFFSET(MonitorInfo, _impl_.cpu_stat_)}},
    // .monitor.proto.MemInfo mem_info = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 1, 3, PROTOBUF_FIELD_OFFSET(MonitorInfo, _impl_.mem_info_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(MonitorInfo, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .monitor.proto.SoftIrq soft_irq = 4;
    {PROTOBUF_FIELD_OFFSET(MonitorInfo, _impl_.soft_irq_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .monitor.proto.CpuLoad cpu_load = 5;
    {PROTOBUF_FIELD_OFFSET(MonitorInfo, _impl_.cpu_load_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .monitor.proto.CpuStat cpu_stat = 6;
    {PROTOBUF_FIELD_OFFSET(MonitorInfo, _impl_.cpu_stat_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .monitor.proto.MemInfo mem_info = 7;
    {PROTOBUF_FIELD_OFFSET(MonitorInfo, _impl_.mem_info_), _Internal::kHasBitsOffset + 1, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .monitor.proto.NetInfo net_info = 8;
    {PROTOBUF_FIELD_OFFSET(MonitorInfo, _impl_.net_info_), -1, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::monitor::proto::SoftIrq>()},
    {::_pbi::TcParser::GetTable<::monitor::proto::CpuLoad>()},
    {::_pbi::TcParser::GetTable<::monitor::proto::CpuStat>()},
    {::_pbi::TcParser::GetTable<::monitor::proto::MemInfo>()},
    {::_pbi::TcParser::GetTable<::monitor::proto::NetInfo>()},
  }}, {{
    "\31\4\0\0\0\0\0\0"
    "monitor.proto.MonitorInfo"
    "name"
  }},
};

::uint8_t* MonitorInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:monitor.proto.MonitorInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "monitor.proto.MonitorInfo.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .monitor.proto.SoftIrq soft_irq = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_soft_irq_size()); i < n; i++) {
    const auto& repfield = this->_internal_soft_irq().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .monitor.proto.CpuLoad cpu_load = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::cpu_load(this),
        _Internal::cpu_load(this).GetCachedSize(), target, stream);
  }

  // repeated .monitor.proto.CpuStat cpu_stat = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cpu_stat_size()); i < n; i++) {
    const auto& repfield = this->_internal_cpu_stat().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .monitor.proto.MemInfo mem_info = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::mem_info(this),
        _Internal::mem_info(this).GetCachedSize(), target, stream);
  }

  // repeated .monitor.proto.NetInfo net_info = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_net_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_net_info().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:monitor.proto.MonitorInfo)
  return target;
}

::size_t MonitorInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:monitor.proto.MonitorInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .monitor.proto.SoftIrq soft_irq = 4;
  total_size += 1UL * this->_internal_soft_irq_size();
  for (const auto& msg : this->_internal_soft_irq()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .monitor.proto.CpuStat cpu_stat = 6;
  total_size += 1UL * this->_internal_cpu_stat_size();
  for (const auto& msg : this->_internal_cpu_stat()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .monitor.proto.NetInfo net_info = 8;
  total_size += 1UL * this->_internal_net_info_size();
  for (const auto& msg : this->_internal_net_info()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .monitor.proto.CpuLoad cpu_load = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.cpu_load_);
    }

    // .monitor.proto.MemInfo mem_info = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.mem_info_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MonitorInfo::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    MonitorInfo::MergeImpl
};
const ::google::protobuf::Message::ClassData*MonitorInfo::GetClassData() const { return &_class_data_; }


void MonitorInfo::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MonitorInfo*>(&to_msg);
  auto& from = static_cast<const MonitorInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:monitor.proto.MonitorInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_soft_irq()->MergeFrom(from._internal_soft_irq());
  _this->_internal_mutable_cpu_stat()->MergeFrom(from._internal_cpu_stat());
  _this->_internal_mutable_net_info()->MergeFrom(from._internal_net_info());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_cpu_load()->::monitor::proto::CpuLoad::MergeFrom(
          from._internal_cpu_load());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_mem_info()->::monitor::proto::MemInfo::MergeFrom(
          from._internal_mem_info());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MonitorInfo::CopyFrom(const MonitorInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:monitor.proto.MonitorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MonitorInfo::IsInitialized() const {
  return true;
}

void MonitorInfo::InternalSwap(MonitorInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.soft_irq_.InternalSwap(&other->_impl_.soft_irq_);
  _impl_.cpu_stat_.InternalSwap(&other->_impl_.cpu_stat_);
  _impl_.net_info_.InternalSwap(&other->_impl_.net_info_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MonitorInfo, _impl_.mem_info_)
      + sizeof(MonitorInfo::_impl_.mem_info_)
      - PROTOBUF_FIELD_OFFSET(MonitorInfo, _impl_.cpu_load_)>(
          reinterpret_cast<char*>(&_impl_.cpu_load_),
          reinterpret_cast<char*>(&other->_impl_.cpu_load_));
}

::google::protobuf::Metadata MonitorInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_monitor_5finfo_2eproto_getter, &descriptor_table_monitor_5finfo_2eproto_once,
      file_level_metadata_monitor_5finfo_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace monitor
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
