// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cpu_softirq.proto

#include "cpu_softirq.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace monitor {
namespace proto {
        template <typename>
PROTOBUF_CONSTEXPR SoftIrq::SoftIrq(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.cpu_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.hi_)*/ 0,
      /*decltype(_impl_.timer_)*/ 0,
      /*decltype(_impl_.net_tx_)*/ 0,
      /*decltype(_impl_.net_rx_)*/ 0,
      /*decltype(_impl_.block_)*/ 0,
      /*decltype(_impl_.irq_poll_)*/ 0,
      /*decltype(_impl_.tasklet_)*/ 0,
      /*decltype(_impl_.sched_)*/ 0,
      /*decltype(_impl_.hrtimer_)*/ 0,
      /*decltype(_impl_.rcu_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct SoftIrqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SoftIrqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SoftIrqDefaultTypeInternal() {}
  union {
    SoftIrq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SoftIrqDefaultTypeInternal _SoftIrq_default_instance_;
}  // namespace proto
}  // namespace monitor
static ::_pb::Metadata file_level_metadata_cpu_5fsoftirq_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cpu_5fsoftirq_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cpu_5fsoftirq_2eproto = nullptr;
const ::uint32_t TableStruct_cpu_5fsoftirq_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::monitor::proto::SoftIrq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::monitor::proto::SoftIrq, _impl_.cpu_),
    PROTOBUF_FIELD_OFFSET(::monitor::proto::SoftIrq, _impl_.hi_),
    PROTOBUF_FIELD_OFFSET(::monitor::proto::SoftIrq, _impl_.timer_),
    PROTOBUF_FIELD_OFFSET(::monitor::proto::SoftIrq, _impl_.net_tx_),
    PROTOBUF_FIELD_OFFSET(::monitor::proto::SoftIrq, _impl_.net_rx_),
    PROTOBUF_FIELD_OFFSET(::monitor::proto::SoftIrq, _impl_.block_),
    PROTOBUF_FIELD_OFFSET(::monitor::proto::SoftIrq, _impl_.irq_poll_),
    PROTOBUF_FIELD_OFFSET(::monitor::proto::SoftIrq, _impl_.tasklet_),
    PROTOBUF_FIELD_OFFSET(::monitor::proto::SoftIrq, _impl_.sched_),
    PROTOBUF_FIELD_OFFSET(::monitor::proto::SoftIrq, _impl_.hrtimer_),
    PROTOBUF_FIELD_OFFSET(::monitor::proto::SoftIrq, _impl_.rcu_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::monitor::proto::SoftIrq)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::monitor::proto::_SoftIrq_default_instance_._instance,
};
const char descriptor_table_protodef_cpu_5fsoftirq_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\021cpu_softirq.proto\022\rmonitor.proto\"\260\001\n\007S"
    "oftIrq\022\013\n\003cpu\030\001 \001(\t\022\n\n\002hi\030\002 \001(\002\022\r\n\005timer"
    "\030\003 \001(\002\022\016\n\006net_tx\030\004 \001(\002\022\016\n\006net_rx\030\005 \001(\002\022\r"
    "\n\005block\030\006 \001(\002\022\020\n\010irq_poll\030\007 \001(\002\022\017\n\007taskl"
    "et\030\010 \001(\002\022\r\n\005sched\030\t \001(\002\022\017\n\007hrtimer\030\n \001(\002"
    "\022\013\n\003rcu\030\013 \001(\002b\006proto3"
};
static ::absl::once_flag descriptor_table_cpu_5fsoftirq_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cpu_5fsoftirq_2eproto = {
    false,
    false,
    221,
    descriptor_table_protodef_cpu_5fsoftirq_2eproto,
    "cpu_softirq.proto",
    &descriptor_table_cpu_5fsoftirq_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_cpu_5fsoftirq_2eproto::offsets,
    file_level_metadata_cpu_5fsoftirq_2eproto,
    file_level_enum_descriptors_cpu_5fsoftirq_2eproto,
    file_level_service_descriptors_cpu_5fsoftirq_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cpu_5fsoftirq_2eproto_getter() {
  return &descriptor_table_cpu_5fsoftirq_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cpu_5fsoftirq_2eproto(&descriptor_table_cpu_5fsoftirq_2eproto);
namespace monitor {
namespace proto {
// ===================================================================

class SoftIrq::_Internal {
 public:
};

SoftIrq::SoftIrq(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:monitor.proto.SoftIrq)
}
SoftIrq::SoftIrq(const SoftIrq& from) : ::google::protobuf::Message() {
  SoftIrq* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cpu_){},
      decltype(_impl_.hi_){},
      decltype(_impl_.timer_){},
      decltype(_impl_.net_tx_){},
      decltype(_impl_.net_rx_){},
      decltype(_impl_.block_){},
      decltype(_impl_.irq_poll_){},
      decltype(_impl_.tasklet_){},
      decltype(_impl_.sched_){},
      decltype(_impl_.hrtimer_){},
      decltype(_impl_.rcu_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.cpu_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cpu_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cpu().empty()) {
    _this->_impl_.cpu_.Set(from._internal_cpu(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.hi_, &from._impl_.hi_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.rcu_) -
    reinterpret_cast<char*>(&_impl_.hi_)) + sizeof(_impl_.rcu_));

  // @@protoc_insertion_point(copy_constructor:monitor.proto.SoftIrq)
}
inline void SoftIrq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.cpu_){},
      decltype(_impl_.hi_){0},
      decltype(_impl_.timer_){0},
      decltype(_impl_.net_tx_){0},
      decltype(_impl_.net_rx_){0},
      decltype(_impl_.block_){0},
      decltype(_impl_.irq_poll_){0},
      decltype(_impl_.tasklet_){0},
      decltype(_impl_.sched_){0},
      decltype(_impl_.hrtimer_){0},
      decltype(_impl_.rcu_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.cpu_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cpu_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
SoftIrq::~SoftIrq() {
  // @@protoc_insertion_point(destructor:monitor.proto.SoftIrq)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SoftIrq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cpu_.Destroy();
}
void SoftIrq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void SoftIrq::Clear() {
// @@protoc_insertion_point(message_clear_start:monitor.proto.SoftIrq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cpu_.ClearToEmpty();
  ::memset(&_impl_.hi_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.rcu_) -
      reinterpret_cast<char*>(&_impl_.hi_)) + sizeof(_impl_.rcu_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SoftIrq::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 11, 0, 41, 2> SoftIrq::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    11, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965248,  // skipmap
    offsetof(decltype(_table_), field_entries),
    11,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SoftIrq_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string cpu = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SoftIrq, _impl_.cpu_)}},
    // float hi = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(SoftIrq, _impl_.hi_)}},
    // float timer = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(SoftIrq, _impl_.timer_)}},
    // float net_tx = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(SoftIrq, _impl_.net_tx_)}},
    // float net_rx = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(SoftIrq, _impl_.net_rx_)}},
    // float block = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(SoftIrq, _impl_.block_)}},
    // float irq_poll = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 63, 0, PROTOBUF_FIELD_OFFSET(SoftIrq, _impl_.irq_poll_)}},
    // float tasklet = 8;
    {::_pbi::TcParser::FastF32S1,
     {69, 63, 0, PROTOBUF_FIELD_OFFSET(SoftIrq, _impl_.tasklet_)}},
    // float sched = 9;
    {::_pbi::TcParser::FastF32S1,
     {77, 63, 0, PROTOBUF_FIELD_OFFSET(SoftIrq, _impl_.sched_)}},
    // float hrtimer = 10;
    {::_pbi::TcParser::FastF32S1,
     {85, 63, 0, PROTOBUF_FIELD_OFFSET(SoftIrq, _impl_.hrtimer_)}},
    // float rcu = 11;
    {::_pbi::TcParser::FastF32S1,
     {93, 63, 0, PROTOBUF_FIELD_OFFSET(SoftIrq, _impl_.rcu_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string cpu = 1;
    {PROTOBUF_FIELD_OFFSET(SoftIrq, _impl_.cpu_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // float hi = 2;
    {PROTOBUF_FIELD_OFFSET(SoftIrq, _impl_.hi_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float timer = 3;
    {PROTOBUF_FIELD_OFFSET(SoftIrq, _impl_.timer_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float net_tx = 4;
    {PROTOBUF_FIELD_OFFSET(SoftIrq, _impl_.net_tx_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float net_rx = 5;
    {PROTOBUF_FIELD_OFFSET(SoftIrq, _impl_.net_rx_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float block = 6;
    {PROTOBUF_FIELD_OFFSET(SoftIrq, _impl_.block_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float irq_poll = 7;
    {PROTOBUF_FIELD_OFFSET(SoftIrq, _impl_.irq_poll_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float tasklet = 8;
    {PROTOBUF_FIELD_OFFSET(SoftIrq, _impl_.tasklet_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float sched = 9;
    {PROTOBUF_FIELD_OFFSET(SoftIrq, _impl_.sched_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float hrtimer = 10;
    {PROTOBUF_FIELD_OFFSET(SoftIrq, _impl_.hrtimer_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float rcu = 11;
    {PROTOBUF_FIELD_OFFSET(SoftIrq, _impl_.rcu_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
    "\25\3\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "monitor.proto.SoftIrq"
    "cpu"
  }},
};

::uint8_t* SoftIrq::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:monitor.proto.SoftIrq)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string cpu = 1;
  if (!this->_internal_cpu().empty()) {
    const std::string& _s = this->_internal_cpu();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "monitor.proto.SoftIrq.cpu");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // float hi = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_hi = this->_internal_hi();
  ::uint32_t raw_hi;
  memcpy(&raw_hi, &tmp_hi, sizeof(tmp_hi));
  if (raw_hi != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_hi(), target);
  }

  // float timer = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_timer = this->_internal_timer();
  ::uint32_t raw_timer;
  memcpy(&raw_timer, &tmp_timer, sizeof(tmp_timer));
  if (raw_timer != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_timer(), target);
  }

  // float net_tx = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_net_tx = this->_internal_net_tx();
  ::uint32_t raw_net_tx;
  memcpy(&raw_net_tx, &tmp_net_tx, sizeof(tmp_net_tx));
  if (raw_net_tx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_net_tx(), target);
  }

  // float net_rx = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_net_rx = this->_internal_net_rx();
  ::uint32_t raw_net_rx;
  memcpy(&raw_net_rx, &tmp_net_rx, sizeof(tmp_net_rx));
  if (raw_net_rx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_net_rx(), target);
  }

  // float block = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_block = this->_internal_block();
  ::uint32_t raw_block;
  memcpy(&raw_block, &tmp_block, sizeof(tmp_block));
  if (raw_block != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_block(), target);
  }

  // float irq_poll = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_irq_poll = this->_internal_irq_poll();
  ::uint32_t raw_irq_poll;
  memcpy(&raw_irq_poll, &tmp_irq_poll, sizeof(tmp_irq_poll));
  if (raw_irq_poll != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        7, this->_internal_irq_poll(), target);
  }

  // float tasklet = 8;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_tasklet = this->_internal_tasklet();
  ::uint32_t raw_tasklet;
  memcpy(&raw_tasklet, &tmp_tasklet, sizeof(tmp_tasklet));
  if (raw_tasklet != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        8, this->_internal_tasklet(), target);
  }

  // float sched = 9;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_sched = this->_internal_sched();
  ::uint32_t raw_sched;
  memcpy(&raw_sched, &tmp_sched, sizeof(tmp_sched));
  if (raw_sched != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        9, this->_internal_sched(), target);
  }

  // float hrtimer = 10;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_hrtimer = this->_internal_hrtimer();
  ::uint32_t raw_hrtimer;
  memcpy(&raw_hrtimer, &tmp_hrtimer, sizeof(tmp_hrtimer));
  if (raw_hrtimer != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        10, this->_internal_hrtimer(), target);
  }

  // float rcu = 11;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_rcu = this->_internal_rcu();
  ::uint32_t raw_rcu;
  memcpy(&raw_rcu, &tmp_rcu, sizeof(tmp_rcu));
  if (raw_rcu != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        11, this->_internal_rcu(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:monitor.proto.SoftIrq)
  return target;
}

::size_t SoftIrq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:monitor.proto.SoftIrq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cpu = 1;
  if (!this->_internal_cpu().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_cpu());
  }

  // float hi = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_hi = this->_internal_hi();
  ::uint32_t raw_hi;
  memcpy(&raw_hi, &tmp_hi, sizeof(tmp_hi));
  if (raw_hi != 0) {
    total_size += 5;
  }

  // float timer = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_timer = this->_internal_timer();
  ::uint32_t raw_timer;
  memcpy(&raw_timer, &tmp_timer, sizeof(tmp_timer));
  if (raw_timer != 0) {
    total_size += 5;
  }

  // float net_tx = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_net_tx = this->_internal_net_tx();
  ::uint32_t raw_net_tx;
  memcpy(&raw_net_tx, &tmp_net_tx, sizeof(tmp_net_tx));
  if (raw_net_tx != 0) {
    total_size += 5;
  }

  // float net_rx = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_net_rx = this->_internal_net_rx();
  ::uint32_t raw_net_rx;
  memcpy(&raw_net_rx, &tmp_net_rx, sizeof(tmp_net_rx));
  if (raw_net_rx != 0) {
    total_size += 5;
  }

  // float block = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_block = this->_internal_block();
  ::uint32_t raw_block;
  memcpy(&raw_block, &tmp_block, sizeof(tmp_block));
  if (raw_block != 0) {
    total_size += 5;
  }

  // float irq_poll = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_irq_poll = this->_internal_irq_poll();
  ::uint32_t raw_irq_poll;
  memcpy(&raw_irq_poll, &tmp_irq_poll, sizeof(tmp_irq_poll));
  if (raw_irq_poll != 0) {
    total_size += 5;
  }

  // float tasklet = 8;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_tasklet = this->_internal_tasklet();
  ::uint32_t raw_tasklet;
  memcpy(&raw_tasklet, &tmp_tasklet, sizeof(tmp_tasklet));
  if (raw_tasklet != 0) {
    total_size += 5;
  }

  // float sched = 9;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_sched = this->_internal_sched();
  ::uint32_t raw_sched;
  memcpy(&raw_sched, &tmp_sched, sizeof(tmp_sched));
  if (raw_sched != 0) {
    total_size += 5;
  }

  // float hrtimer = 10;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_hrtimer = this->_internal_hrtimer();
  ::uint32_t raw_hrtimer;
  memcpy(&raw_hrtimer, &tmp_hrtimer, sizeof(tmp_hrtimer));
  if (raw_hrtimer != 0) {
    total_size += 5;
  }

  // float rcu = 11;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_rcu = this->_internal_rcu();
  ::uint32_t raw_rcu;
  memcpy(&raw_rcu, &tmp_rcu, sizeof(tmp_rcu));
  if (raw_rcu != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SoftIrq::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    SoftIrq::MergeImpl
};
const ::google::protobuf::Message::ClassData*SoftIrq::GetClassData() const { return &_class_data_; }


void SoftIrq::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SoftIrq*>(&to_msg);
  auto& from = static_cast<const SoftIrq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:monitor.proto.SoftIrq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_cpu().empty()) {
    _this->_internal_set_cpu(from._internal_cpu());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_hi = from._internal_hi();
  ::uint32_t raw_hi;
  memcpy(&raw_hi, &tmp_hi, sizeof(tmp_hi));
  if (raw_hi != 0) {
    _this->_internal_set_hi(from._internal_hi());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_timer = from._internal_timer();
  ::uint32_t raw_timer;
  memcpy(&raw_timer, &tmp_timer, sizeof(tmp_timer));
  if (raw_timer != 0) {
    _this->_internal_set_timer(from._internal_timer());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_net_tx = from._internal_net_tx();
  ::uint32_t raw_net_tx;
  memcpy(&raw_net_tx, &tmp_net_tx, sizeof(tmp_net_tx));
  if (raw_net_tx != 0) {
    _this->_internal_set_net_tx(from._internal_net_tx());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_net_rx = from._internal_net_rx();
  ::uint32_t raw_net_rx;
  memcpy(&raw_net_rx, &tmp_net_rx, sizeof(tmp_net_rx));
  if (raw_net_rx != 0) {
    _this->_internal_set_net_rx(from._internal_net_rx());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_block = from._internal_block();
  ::uint32_t raw_block;
  memcpy(&raw_block, &tmp_block, sizeof(tmp_block));
  if (raw_block != 0) {
    _this->_internal_set_block(from._internal_block());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_irq_poll = from._internal_irq_poll();
  ::uint32_t raw_irq_poll;
  memcpy(&raw_irq_poll, &tmp_irq_poll, sizeof(tmp_irq_poll));
  if (raw_irq_poll != 0) {
    _this->_internal_set_irq_poll(from._internal_irq_poll());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_tasklet = from._internal_tasklet();
  ::uint32_t raw_tasklet;
  memcpy(&raw_tasklet, &tmp_tasklet, sizeof(tmp_tasklet));
  if (raw_tasklet != 0) {
    _this->_internal_set_tasklet(from._internal_tasklet());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_sched = from._internal_sched();
  ::uint32_t raw_sched;
  memcpy(&raw_sched, &tmp_sched, sizeof(tmp_sched));
  if (raw_sched != 0) {
    _this->_internal_set_sched(from._internal_sched());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_hrtimer = from._internal_hrtimer();
  ::uint32_t raw_hrtimer;
  memcpy(&raw_hrtimer, &tmp_hrtimer, sizeof(tmp_hrtimer));
  if (raw_hrtimer != 0) {
    _this->_internal_set_hrtimer(from._internal_hrtimer());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_rcu = from._internal_rcu();
  ::uint32_t raw_rcu;
  memcpy(&raw_rcu, &tmp_rcu, sizeof(tmp_rcu));
  if (raw_rcu != 0) {
    _this->_internal_set_rcu(from._internal_rcu());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SoftIrq::CopyFrom(const SoftIrq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:monitor.proto.SoftIrq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SoftIrq::IsInitialized() const {
  return true;
}

void SoftIrq::InternalSwap(SoftIrq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cpu_, lhs_arena,
                                       &other->_impl_.cpu_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SoftIrq, _impl_.rcu_)
      + sizeof(SoftIrq::_impl_.rcu_)
      - PROTOBUF_FIELD_OFFSET(SoftIrq, _impl_.hi_)>(
          reinterpret_cast<char*>(&_impl_.hi_),
          reinterpret_cast<char*>(&other->_impl_.hi_));
}

::google::protobuf::Metadata SoftIrq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cpu_5fsoftirq_2eproto_getter, &descriptor_table_cpu_5fsoftirq_2eproto_once,
      file_level_metadata_cpu_5fsoftirq_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace monitor
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
