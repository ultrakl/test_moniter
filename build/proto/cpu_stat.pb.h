// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cpu_stat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cpu_5fstat_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cpu_5fstat_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024002 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cpu_5fstat_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_cpu_5fstat_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_cpu_5fstat_2eproto;
namespace monitor {
namespace proto {
class CpuStat;
struct CpuStatDefaultTypeInternal;
extern CpuStatDefaultTypeInternal _CpuStat_default_instance_;
}  // namespace proto
}  // namespace monitor
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace monitor {
namespace proto {

// ===================================================================


// -------------------------------------------------------------------

class CpuStat final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:monitor.proto.CpuStat) */ {
 public:
  inline CpuStat() : CpuStat(nullptr) {}
  ~CpuStat() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CpuStat(::google::protobuf::internal::ConstantInitialized);

  CpuStat(const CpuStat& from);
  CpuStat(CpuStat&& from) noexcept
    : CpuStat() {
    *this = ::std::move(from);
  }

  inline CpuStat& operator=(const CpuStat& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpuStat& operator=(CpuStat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CpuStat& default_instance() {
    return *internal_default_instance();
  }
  static inline const CpuStat* internal_default_instance() {
    return reinterpret_cast<const CpuStat*>(
               &_CpuStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CpuStat& a, CpuStat& b) {
    a.Swap(&b);
  }
  inline void Swap(CpuStat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CpuStat* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CpuStat* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CpuStat>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CpuStat& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CpuStat& from) {
    CpuStat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CpuStat* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "monitor.proto.CpuStat";
  }
  protected:
  explicit CpuStat(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCpuNameFieldNumber = 1,
    kCpuPercentFieldNumber = 2,
    kUsrPercentFieldNumber = 3,
    kSystemPercentFieldNumber = 4,
    kNicePercentFieldNumber = 5,
    kIdlePercentFieldNumber = 6,
    kIoWaitPercentFieldNumber = 7,
    kIrqPercentFieldNumber = 8,
    kSoftIrqPercentFieldNumber = 9,
  };
  // string cpu_name = 1;
  void clear_cpu_name() ;
  const std::string& cpu_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cpu_name(Arg_&& arg, Args_... args);
  std::string* mutable_cpu_name();
  PROTOBUF_NODISCARD std::string* release_cpu_name();
  void set_allocated_cpu_name(std::string* ptr);

  private:
  const std::string& _internal_cpu_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cpu_name(
      const std::string& value);
  std::string* _internal_mutable_cpu_name();

  public:
  // float cpu_percent = 2;
  void clear_cpu_percent() ;
  float cpu_percent() const;
  void set_cpu_percent(float value);

  private:
  float _internal_cpu_percent() const;
  void _internal_set_cpu_percent(float value);

  public:
  // float usr_percent = 3;
  void clear_usr_percent() ;
  float usr_percent() const;
  void set_usr_percent(float value);

  private:
  float _internal_usr_percent() const;
  void _internal_set_usr_percent(float value);

  public:
  // float system_percent = 4;
  void clear_system_percent() ;
  float system_percent() const;
  void set_system_percent(float value);

  private:
  float _internal_system_percent() const;
  void _internal_set_system_percent(float value);

  public:
  // float nice_percent = 5;
  void clear_nice_percent() ;
  float nice_percent() const;
  void set_nice_percent(float value);

  private:
  float _internal_nice_percent() const;
  void _internal_set_nice_percent(float value);

  public:
  // float idle_percent = 6;
  void clear_idle_percent() ;
  float idle_percent() const;
  void set_idle_percent(float value);

  private:
  float _internal_idle_percent() const;
  void _internal_set_idle_percent(float value);

  public:
  // float io_wait_percent = 7;
  void clear_io_wait_percent() ;
  float io_wait_percent() const;
  void set_io_wait_percent(float value);

  private:
  float _internal_io_wait_percent() const;
  void _internal_set_io_wait_percent(float value);

  public:
  // float irq_percent = 8;
  void clear_irq_percent() ;
  float irq_percent() const;
  void set_irq_percent(float value);

  private:
  float _internal_irq_percent() const;
  void _internal_set_irq_percent(float value);

  public:
  // float soft_irq_percent = 9;
  void clear_soft_irq_percent() ;
  float soft_irq_percent() const;
  void set_soft_irq_percent(float value);

  private:
  float _internal_soft_irq_percent() const;
  void _internal_set_soft_irq_percent(float value);

  public:
  // @@protoc_insertion_point(class_scope:monitor.proto.CpuStat)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 9, 0, 46, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr cpu_name_;
    float cpu_percent_;
    float usr_percent_;
    float system_percent_;
    float nice_percent_;
    float idle_percent_;
    float io_wait_percent_;
    float irq_percent_;
    float soft_irq_percent_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cpu_5fstat_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CpuStat

// string cpu_name = 1;
inline void CpuStat::clear_cpu_name() {
  _impl_.cpu_name_.ClearToEmpty();
}
inline const std::string& CpuStat::cpu_name() const {
  // @@protoc_insertion_point(field_get:monitor.proto.CpuStat.cpu_name)
  return _internal_cpu_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CpuStat::set_cpu_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cpu_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:monitor.proto.CpuStat.cpu_name)
}
inline std::string* CpuStat::mutable_cpu_name() {
  std::string* _s = _internal_mutable_cpu_name();
  // @@protoc_insertion_point(field_mutable:monitor.proto.CpuStat.cpu_name)
  return _s;
}
inline const std::string& CpuStat::_internal_cpu_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cpu_name_.Get();
}
inline void CpuStat::_internal_set_cpu_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cpu_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CpuStat::_internal_mutable_cpu_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.cpu_name_.Mutable( GetArenaForAllocation());
}
inline std::string* CpuStat::release_cpu_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:monitor.proto.CpuStat.cpu_name)
  return _impl_.cpu_name_.Release();
}
inline void CpuStat::set_allocated_cpu_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cpu_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.cpu_name_.IsDefault()) {
          _impl_.cpu_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:monitor.proto.CpuStat.cpu_name)
}

// float cpu_percent = 2;
inline void CpuStat::clear_cpu_percent() {
  _impl_.cpu_percent_ = 0;
}
inline float CpuStat::cpu_percent() const {
  // @@protoc_insertion_point(field_get:monitor.proto.CpuStat.cpu_percent)
  return _internal_cpu_percent();
}
inline void CpuStat::set_cpu_percent(float value) {
  _internal_set_cpu_percent(value);
  // @@protoc_insertion_point(field_set:monitor.proto.CpuStat.cpu_percent)
}
inline float CpuStat::_internal_cpu_percent() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cpu_percent_;
}
inline void CpuStat::_internal_set_cpu_percent(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cpu_percent_ = value;
}

// float usr_percent = 3;
inline void CpuStat::clear_usr_percent() {
  _impl_.usr_percent_ = 0;
}
inline float CpuStat::usr_percent() const {
  // @@protoc_insertion_point(field_get:monitor.proto.CpuStat.usr_percent)
  return _internal_usr_percent();
}
inline void CpuStat::set_usr_percent(float value) {
  _internal_set_usr_percent(value);
  // @@protoc_insertion_point(field_set:monitor.proto.CpuStat.usr_percent)
}
inline float CpuStat::_internal_usr_percent() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.usr_percent_;
}
inline void CpuStat::_internal_set_usr_percent(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.usr_percent_ = value;
}

// float system_percent = 4;
inline void CpuStat::clear_system_percent() {
  _impl_.system_percent_ = 0;
}
inline float CpuStat::system_percent() const {
  // @@protoc_insertion_point(field_get:monitor.proto.CpuStat.system_percent)
  return _internal_system_percent();
}
inline void CpuStat::set_system_percent(float value) {
  _internal_set_system_percent(value);
  // @@protoc_insertion_point(field_set:monitor.proto.CpuStat.system_percent)
}
inline float CpuStat::_internal_system_percent() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.system_percent_;
}
inline void CpuStat::_internal_set_system_percent(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.system_percent_ = value;
}

// float nice_percent = 5;
inline void CpuStat::clear_nice_percent() {
  _impl_.nice_percent_ = 0;
}
inline float CpuStat::nice_percent() const {
  // @@protoc_insertion_point(field_get:monitor.proto.CpuStat.nice_percent)
  return _internal_nice_percent();
}
inline void CpuStat::set_nice_percent(float value) {
  _internal_set_nice_percent(value);
  // @@protoc_insertion_point(field_set:monitor.proto.CpuStat.nice_percent)
}
inline float CpuStat::_internal_nice_percent() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nice_percent_;
}
inline void CpuStat::_internal_set_nice_percent(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nice_percent_ = value;
}

// float idle_percent = 6;
inline void CpuStat::clear_idle_percent() {
  _impl_.idle_percent_ = 0;
}
inline float CpuStat::idle_percent() const {
  // @@protoc_insertion_point(field_get:monitor.proto.CpuStat.idle_percent)
  return _internal_idle_percent();
}
inline void CpuStat::set_idle_percent(float value) {
  _internal_set_idle_percent(value);
  // @@protoc_insertion_point(field_set:monitor.proto.CpuStat.idle_percent)
}
inline float CpuStat::_internal_idle_percent() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.idle_percent_;
}
inline void CpuStat::_internal_set_idle_percent(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.idle_percent_ = value;
}

// float io_wait_percent = 7;
inline void CpuStat::clear_io_wait_percent() {
  _impl_.io_wait_percent_ = 0;
}
inline float CpuStat::io_wait_percent() const {
  // @@protoc_insertion_point(field_get:monitor.proto.CpuStat.io_wait_percent)
  return _internal_io_wait_percent();
}
inline void CpuStat::set_io_wait_percent(float value) {
  _internal_set_io_wait_percent(value);
  // @@protoc_insertion_point(field_set:monitor.proto.CpuStat.io_wait_percent)
}
inline float CpuStat::_internal_io_wait_percent() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.io_wait_percent_;
}
inline void CpuStat::_internal_set_io_wait_percent(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.io_wait_percent_ = value;
}

// float irq_percent = 8;
inline void CpuStat::clear_irq_percent() {
  _impl_.irq_percent_ = 0;
}
inline float CpuStat::irq_percent() const {
  // @@protoc_insertion_point(field_get:monitor.proto.CpuStat.irq_percent)
  return _internal_irq_percent();
}
inline void CpuStat::set_irq_percent(float value) {
  _internal_set_irq_percent(value);
  // @@protoc_insertion_point(field_set:monitor.proto.CpuStat.irq_percent)
}
inline float CpuStat::_internal_irq_percent() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.irq_percent_;
}
inline void CpuStat::_internal_set_irq_percent(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.irq_percent_ = value;
}

// float soft_irq_percent = 9;
inline void CpuStat::clear_soft_irq_percent() {
  _impl_.soft_irq_percent_ = 0;
}
inline float CpuStat::soft_irq_percent() const {
  // @@protoc_insertion_point(field_get:monitor.proto.CpuStat.soft_irq_percent)
  return _internal_soft_irq_percent();
}
inline void CpuStat::set_soft_irq_percent(float value) {
  _internal_set_soft_irq_percent(value);
  // @@protoc_insertion_point(field_set:monitor.proto.CpuStat.soft_irq_percent)
}
inline float CpuStat::_internal_soft_irq_percent() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.soft_irq_percent_;
}
inline void CpuStat::_internal_set_soft_irq_percent(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.soft_irq_percent_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace monitor


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cpu_5fstat_2eproto_2epb_2eh
