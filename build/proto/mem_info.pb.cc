// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mem_info.proto

#include "mem_info.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace monitor {
namespace proto {
        template <typename>
PROTOBUF_CONSTEXPR MemInfo::MemInfo(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.total_)*/ 0,
      /*decltype(_impl_.free_)*/ 0,
      /*decltype(_impl_.avail_)*/ 0,
      /*decltype(_impl_.buffers_)*/ 0,
      /*decltype(_impl_.cached_)*/ 0,
      /*decltype(_impl_.swap_cached_)*/ 0,
      /*decltype(_impl_.active_)*/ 0,
      /*decltype(_impl_.inactive_)*/ 0,
      /*decltype(_impl_.active_anon_)*/ 0,
      /*decltype(_impl_.inactive_anon_)*/ 0,
      /*decltype(_impl_.active_file_)*/ 0,
      /*decltype(_impl_.inactive_file_)*/ 0,
      /*decltype(_impl_.dirty_)*/ 0,
      /*decltype(_impl_.writeback_)*/ 0,
      /*decltype(_impl_.anon_pages_)*/ 0,
      /*decltype(_impl_.mapped_)*/ 0,
      /*decltype(_impl_.kreclaimable_)*/ 0,
      /*decltype(_impl_.sreclaimable_)*/ 0,
      /*decltype(_impl_.sunreclaim_)*/ 0,
      /*decltype(_impl_.used_percent_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct MemInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemInfoDefaultTypeInternal() {}
  union {
    MemInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemInfoDefaultTypeInternal _MemInfo_default_instance_;
}  // namespace proto
}  // namespace monitor
static ::_pb::Metadata file_level_metadata_mem_5finfo_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_mem_5finfo_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_mem_5finfo_2eproto = nullptr;
const ::uint32_t TableStruct_mem_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::monitor::proto::MemInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::monitor::proto::MemInfo, _impl_.total_),
    PROTOBUF_FIELD_OFFSET(::monitor::proto::MemInfo, _impl_.free_),
    PROTOBUF_FIELD_OFFSET(::monitor::proto::MemInfo, _impl_.avail_),
    PROTOBUF_FIELD_OFFSET(::monitor::proto::MemInfo, _impl_.buffers_),
    PROTOBUF_FIELD_OFFSET(::monitor::proto::MemInfo, _impl_.cached_),
    PROTOBUF_FIELD_OFFSET(::monitor::proto::MemInfo, _impl_.swap_cached_),
    PROTOBUF_FIELD_OFFSET(::monitor::proto::MemInfo, _impl_.active_),
    PROTOBUF_FIELD_OFFSET(::monitor::proto::MemInfo, _impl_.inactive_),
    PROTOBUF_FIELD_OFFSET(::monitor::proto::MemInfo, _impl_.active_anon_),
    PROTOBUF_FIELD_OFFSET(::monitor::proto::MemInfo, _impl_.inactive_anon_),
    PROTOBUF_FIELD_OFFSET(::monitor::proto::MemInfo, _impl_.active_file_),
    PROTOBUF_FIELD_OFFSET(::monitor::proto::MemInfo, _impl_.inactive_file_),
    PROTOBUF_FIELD_OFFSET(::monitor::proto::MemInfo, _impl_.dirty_),
    PROTOBUF_FIELD_OFFSET(::monitor::proto::MemInfo, _impl_.writeback_),
    PROTOBUF_FIELD_OFFSET(::monitor::proto::MemInfo, _impl_.anon_pages_),
    PROTOBUF_FIELD_OFFSET(::monitor::proto::MemInfo, _impl_.mapped_),
    PROTOBUF_FIELD_OFFSET(::monitor::proto::MemInfo, _impl_.kreclaimable_),
    PROTOBUF_FIELD_OFFSET(::monitor::proto::MemInfo, _impl_.sreclaimable_),
    PROTOBUF_FIELD_OFFSET(::monitor::proto::MemInfo, _impl_.sunreclaim_),
    PROTOBUF_FIELD_OFFSET(::monitor::proto::MemInfo, _impl_.used_percent_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::monitor::proto::MemInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::monitor::proto::_MemInfo_default_instance_._instance,
};
const char descriptor_table_protodef_mem_5finfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\016mem_info.proto\022\rmonitor.proto\"\201\003\n\007MemI"
    "nfo\022\r\n\005total\030\001 \001(\002\022\014\n\004free\030\002 \001(\002\022\r\n\005avai"
    "l\030\003 \001(\002\022\017\n\007buffers\030\004 \001(\002\022\016\n\006cached\030\005 \001(\002"
    "\022\023\n\013swap_cached\030\006 \001(\002\022\016\n\006active\030\007 \001(\002\022\020\n"
    "\010inactive\030\010 \001(\002\022\023\n\013active_anon\030\t \001(\002\022\025\n\r"
    "inactive_anon\030\n \001(\002\022\023\n\013active_file\030\013 \001(\002"
    "\022\025\n\rinactive_file\030\014 \001(\002\022\r\n\005dirty\030\r \001(\002\022\021"
    "\n\twriteback\030\016 \001(\002\022\022\n\nanon_pages\030\017 \001(\002\022\016\n"
    "\006mapped\030\020 \001(\002\022\024\n\014kReclaimable\030\021 \001(\002\022\024\n\014s"
    "Reclaimable\030\022 \001(\002\022\022\n\nsUnreclaim\030\023 \001(\002\022\024\n"
    "\014used_percent\030\037 \001(\002b\006proto3"
};
static ::absl::once_flag descriptor_table_mem_5finfo_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_mem_5finfo_2eproto = {
    false,
    false,
    427,
    descriptor_table_protodef_mem_5finfo_2eproto,
    "mem_info.proto",
    &descriptor_table_mem_5finfo_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_mem_5finfo_2eproto::offsets,
    file_level_metadata_mem_5finfo_2eproto,
    file_level_enum_descriptors_mem_5finfo_2eproto,
    file_level_service_descriptors_mem_5finfo_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_mem_5finfo_2eproto_getter() {
  return &descriptor_table_mem_5finfo_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_mem_5finfo_2eproto(&descriptor_table_mem_5finfo_2eproto);
namespace monitor {
namespace proto {
// ===================================================================

class MemInfo::_Internal {
 public:
};

MemInfo::MemInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:monitor.proto.MemInfo)
}
MemInfo::MemInfo(const MemInfo& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:monitor.proto.MemInfo)
}
inline void MemInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.total_){0},
      decltype(_impl_.free_){0},
      decltype(_impl_.avail_){0},
      decltype(_impl_.buffers_){0},
      decltype(_impl_.cached_){0},
      decltype(_impl_.swap_cached_){0},
      decltype(_impl_.active_){0},
      decltype(_impl_.inactive_){0},
      decltype(_impl_.active_anon_){0},
      decltype(_impl_.inactive_anon_){0},
      decltype(_impl_.active_file_){0},
      decltype(_impl_.inactive_file_){0},
      decltype(_impl_.dirty_){0},
      decltype(_impl_.writeback_){0},
      decltype(_impl_.anon_pages_){0},
      decltype(_impl_.mapped_){0},
      decltype(_impl_.kreclaimable_){0},
      decltype(_impl_.sreclaimable_){0},
      decltype(_impl_.sunreclaim_){0},
      decltype(_impl_.used_percent_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
MemInfo::~MemInfo() {
  // @@protoc_insertion_point(destructor:monitor.proto.MemInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MemInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void MemInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void MemInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:monitor.proto.MemInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.total_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.used_percent_) -
      reinterpret_cast<char*>(&_impl_.total_)) + sizeof(_impl_.used_percent_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MemInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 20, 0, 0, 2> MemInfo::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    31, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    3220701184,  // skipmap
    offsetof(decltype(_table_), field_entries),
    20,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_MemInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float total = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.total_)}},
    // float free = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.free_)}},
    // float avail = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.avail_)}},
    // float buffers = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.buffers_)}},
    // float cached = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.cached_)}},
    // float swap_cached = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.swap_cached_)}},
    // float active = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 63, 0, PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.active_)}},
    // float inactive = 8;
    {::_pbi::TcParser::FastF32S1,
     {69, 63, 0, PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.inactive_)}},
    // float active_anon = 9;
    {::_pbi::TcParser::FastF32S1,
     {77, 63, 0, PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.active_anon_)}},
    // float inactive_anon = 10;
    {::_pbi::TcParser::FastF32S1,
     {85, 63, 0, PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.inactive_anon_)}},
    // float active_file = 11;
    {::_pbi::TcParser::FastF32S1,
     {93, 63, 0, PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.active_file_)}},
    // float inactive_file = 12;
    {::_pbi::TcParser::FastF32S1,
     {101, 63, 0, PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.inactive_file_)}},
    // float dirty = 13;
    {::_pbi::TcParser::FastF32S1,
     {109, 63, 0, PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.dirty_)}},
    // float writeback = 14;
    {::_pbi::TcParser::FastF32S1,
     {117, 63, 0, PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.writeback_)}},
    // float anon_pages = 15;
    {::_pbi::TcParser::FastF32S1,
     {125, 63, 0, PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.anon_pages_)}},
    // float mapped = 16;
    {::_pbi::TcParser::FastF32S2,
     {389, 63, 0, PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.mapped_)}},
    // float kReclaimable = 17;
    {::_pbi::TcParser::FastF32S2,
     {397, 63, 0, PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.kreclaimable_)}},
    // float sReclaimable = 18;
    {::_pbi::TcParser::FastF32S2,
     {405, 63, 0, PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.sreclaimable_)}},
    // float sUnreclaim = 19;
    {::_pbi::TcParser::FastF32S2,
     {413, 63, 0, PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.sunreclaim_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // float used_percent = 31;
    {::_pbi::TcParser::FastF32S2,
     {509, 63, 0, PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.used_percent_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float total = 1;
    {PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.total_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float free = 2;
    {PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.free_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float avail = 3;
    {PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.avail_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float buffers = 4;
    {PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.buffers_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float cached = 5;
    {PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.cached_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float swap_cached = 6;
    {PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.swap_cached_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float active = 7;
    {PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.active_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float inactive = 8;
    {PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.inactive_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float active_anon = 9;
    {PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.active_anon_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float inactive_anon = 10;
    {PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.inactive_anon_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float active_file = 11;
    {PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.active_file_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float inactive_file = 12;
    {PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.inactive_file_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float dirty = 13;
    {PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.dirty_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float writeback = 14;
    {PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.writeback_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float anon_pages = 15;
    {PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.anon_pages_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float mapped = 16;
    {PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.mapped_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float kReclaimable = 17;
    {PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.kreclaimable_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float sReclaimable = 18;
    {PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.sreclaimable_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float sUnreclaim = 19;
    {PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.sunreclaim_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float used_percent = 31;
    {PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.used_percent_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* MemInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:monitor.proto.MemInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float total = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_total = this->_internal_total();
  ::uint32_t raw_total;
  memcpy(&raw_total, &tmp_total, sizeof(tmp_total));
  if (raw_total != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_total(), target);
  }

  // float free = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_free = this->_internal_free();
  ::uint32_t raw_free;
  memcpy(&raw_free, &tmp_free, sizeof(tmp_free));
  if (raw_free != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_free(), target);
  }

  // float avail = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_avail = this->_internal_avail();
  ::uint32_t raw_avail;
  memcpy(&raw_avail, &tmp_avail, sizeof(tmp_avail));
  if (raw_avail != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_avail(), target);
  }

  // float buffers = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_buffers = this->_internal_buffers();
  ::uint32_t raw_buffers;
  memcpy(&raw_buffers, &tmp_buffers, sizeof(tmp_buffers));
  if (raw_buffers != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_buffers(), target);
  }

  // float cached = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_cached = this->_internal_cached();
  ::uint32_t raw_cached;
  memcpy(&raw_cached, &tmp_cached, sizeof(tmp_cached));
  if (raw_cached != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_cached(), target);
  }

  // float swap_cached = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_swap_cached = this->_internal_swap_cached();
  ::uint32_t raw_swap_cached;
  memcpy(&raw_swap_cached, &tmp_swap_cached, sizeof(tmp_swap_cached));
  if (raw_swap_cached != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_swap_cached(), target);
  }

  // float active = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_active = this->_internal_active();
  ::uint32_t raw_active;
  memcpy(&raw_active, &tmp_active, sizeof(tmp_active));
  if (raw_active != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        7, this->_internal_active(), target);
  }

  // float inactive = 8;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_inactive = this->_internal_inactive();
  ::uint32_t raw_inactive;
  memcpy(&raw_inactive, &tmp_inactive, sizeof(tmp_inactive));
  if (raw_inactive != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        8, this->_internal_inactive(), target);
  }

  // float active_anon = 9;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_active_anon = this->_internal_active_anon();
  ::uint32_t raw_active_anon;
  memcpy(&raw_active_anon, &tmp_active_anon, sizeof(tmp_active_anon));
  if (raw_active_anon != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        9, this->_internal_active_anon(), target);
  }

  // float inactive_anon = 10;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_inactive_anon = this->_internal_inactive_anon();
  ::uint32_t raw_inactive_anon;
  memcpy(&raw_inactive_anon, &tmp_inactive_anon, sizeof(tmp_inactive_anon));
  if (raw_inactive_anon != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        10, this->_internal_inactive_anon(), target);
  }

  // float active_file = 11;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_active_file = this->_internal_active_file();
  ::uint32_t raw_active_file;
  memcpy(&raw_active_file, &tmp_active_file, sizeof(tmp_active_file));
  if (raw_active_file != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        11, this->_internal_active_file(), target);
  }

  // float inactive_file = 12;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_inactive_file = this->_internal_inactive_file();
  ::uint32_t raw_inactive_file;
  memcpy(&raw_inactive_file, &tmp_inactive_file, sizeof(tmp_inactive_file));
  if (raw_inactive_file != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        12, this->_internal_inactive_file(), target);
  }

  // float dirty = 13;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_dirty = this->_internal_dirty();
  ::uint32_t raw_dirty;
  memcpy(&raw_dirty, &tmp_dirty, sizeof(tmp_dirty));
  if (raw_dirty != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        13, this->_internal_dirty(), target);
  }

  // float writeback = 14;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_writeback = this->_internal_writeback();
  ::uint32_t raw_writeback;
  memcpy(&raw_writeback, &tmp_writeback, sizeof(tmp_writeback));
  if (raw_writeback != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        14, this->_internal_writeback(), target);
  }

  // float anon_pages = 15;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_anon_pages = this->_internal_anon_pages();
  ::uint32_t raw_anon_pages;
  memcpy(&raw_anon_pages, &tmp_anon_pages, sizeof(tmp_anon_pages));
  if (raw_anon_pages != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        15, this->_internal_anon_pages(), target);
  }

  // float mapped = 16;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_mapped = this->_internal_mapped();
  ::uint32_t raw_mapped;
  memcpy(&raw_mapped, &tmp_mapped, sizeof(tmp_mapped));
  if (raw_mapped != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        16, this->_internal_mapped(), target);
  }

  // float kReclaimable = 17;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_kreclaimable = this->_internal_kreclaimable();
  ::uint32_t raw_kreclaimable;
  memcpy(&raw_kreclaimable, &tmp_kreclaimable, sizeof(tmp_kreclaimable));
  if (raw_kreclaimable != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        17, this->_internal_kreclaimable(), target);
  }

  // float sReclaimable = 18;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_sreclaimable = this->_internal_sreclaimable();
  ::uint32_t raw_sreclaimable;
  memcpy(&raw_sreclaimable, &tmp_sreclaimable, sizeof(tmp_sreclaimable));
  if (raw_sreclaimable != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        18, this->_internal_sreclaimable(), target);
  }

  // float sUnreclaim = 19;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_sunreclaim = this->_internal_sunreclaim();
  ::uint32_t raw_sunreclaim;
  memcpy(&raw_sunreclaim, &tmp_sunreclaim, sizeof(tmp_sunreclaim));
  if (raw_sunreclaim != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        19, this->_internal_sunreclaim(), target);
  }

  // float used_percent = 31;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_used_percent = this->_internal_used_percent();
  ::uint32_t raw_used_percent;
  memcpy(&raw_used_percent, &tmp_used_percent, sizeof(tmp_used_percent));
  if (raw_used_percent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        31, this->_internal_used_percent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:monitor.proto.MemInfo)
  return target;
}

::size_t MemInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:monitor.proto.MemInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float total = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_total = this->_internal_total();
  ::uint32_t raw_total;
  memcpy(&raw_total, &tmp_total, sizeof(tmp_total));
  if (raw_total != 0) {
    total_size += 5;
  }

  // float free = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_free = this->_internal_free();
  ::uint32_t raw_free;
  memcpy(&raw_free, &tmp_free, sizeof(tmp_free));
  if (raw_free != 0) {
    total_size += 5;
  }

  // float avail = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_avail = this->_internal_avail();
  ::uint32_t raw_avail;
  memcpy(&raw_avail, &tmp_avail, sizeof(tmp_avail));
  if (raw_avail != 0) {
    total_size += 5;
  }

  // float buffers = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_buffers = this->_internal_buffers();
  ::uint32_t raw_buffers;
  memcpy(&raw_buffers, &tmp_buffers, sizeof(tmp_buffers));
  if (raw_buffers != 0) {
    total_size += 5;
  }

  // float cached = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_cached = this->_internal_cached();
  ::uint32_t raw_cached;
  memcpy(&raw_cached, &tmp_cached, sizeof(tmp_cached));
  if (raw_cached != 0) {
    total_size += 5;
  }

  // float swap_cached = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_swap_cached = this->_internal_swap_cached();
  ::uint32_t raw_swap_cached;
  memcpy(&raw_swap_cached, &tmp_swap_cached, sizeof(tmp_swap_cached));
  if (raw_swap_cached != 0) {
    total_size += 5;
  }

  // float active = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_active = this->_internal_active();
  ::uint32_t raw_active;
  memcpy(&raw_active, &tmp_active, sizeof(tmp_active));
  if (raw_active != 0) {
    total_size += 5;
  }

  // float inactive = 8;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_inactive = this->_internal_inactive();
  ::uint32_t raw_inactive;
  memcpy(&raw_inactive, &tmp_inactive, sizeof(tmp_inactive));
  if (raw_inactive != 0) {
    total_size += 5;
  }

  // float active_anon = 9;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_active_anon = this->_internal_active_anon();
  ::uint32_t raw_active_anon;
  memcpy(&raw_active_anon, &tmp_active_anon, sizeof(tmp_active_anon));
  if (raw_active_anon != 0) {
    total_size += 5;
  }

  // float inactive_anon = 10;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_inactive_anon = this->_internal_inactive_anon();
  ::uint32_t raw_inactive_anon;
  memcpy(&raw_inactive_anon, &tmp_inactive_anon, sizeof(tmp_inactive_anon));
  if (raw_inactive_anon != 0) {
    total_size += 5;
  }

  // float active_file = 11;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_active_file = this->_internal_active_file();
  ::uint32_t raw_active_file;
  memcpy(&raw_active_file, &tmp_active_file, sizeof(tmp_active_file));
  if (raw_active_file != 0) {
    total_size += 5;
  }

  // float inactive_file = 12;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_inactive_file = this->_internal_inactive_file();
  ::uint32_t raw_inactive_file;
  memcpy(&raw_inactive_file, &tmp_inactive_file, sizeof(tmp_inactive_file));
  if (raw_inactive_file != 0) {
    total_size += 5;
  }

  // float dirty = 13;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_dirty = this->_internal_dirty();
  ::uint32_t raw_dirty;
  memcpy(&raw_dirty, &tmp_dirty, sizeof(tmp_dirty));
  if (raw_dirty != 0) {
    total_size += 5;
  }

  // float writeback = 14;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_writeback = this->_internal_writeback();
  ::uint32_t raw_writeback;
  memcpy(&raw_writeback, &tmp_writeback, sizeof(tmp_writeback));
  if (raw_writeback != 0) {
    total_size += 5;
  }

  // float anon_pages = 15;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_anon_pages = this->_internal_anon_pages();
  ::uint32_t raw_anon_pages;
  memcpy(&raw_anon_pages, &tmp_anon_pages, sizeof(tmp_anon_pages));
  if (raw_anon_pages != 0) {
    total_size += 5;
  }

  // float mapped = 16;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_mapped = this->_internal_mapped();
  ::uint32_t raw_mapped;
  memcpy(&raw_mapped, &tmp_mapped, sizeof(tmp_mapped));
  if (raw_mapped != 0) {
    total_size += 6;
  }

  // float kReclaimable = 17;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_kreclaimable = this->_internal_kreclaimable();
  ::uint32_t raw_kreclaimable;
  memcpy(&raw_kreclaimable, &tmp_kreclaimable, sizeof(tmp_kreclaimable));
  if (raw_kreclaimable != 0) {
    total_size += 6;
  }

  // float sReclaimable = 18;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_sreclaimable = this->_internal_sreclaimable();
  ::uint32_t raw_sreclaimable;
  memcpy(&raw_sreclaimable, &tmp_sreclaimable, sizeof(tmp_sreclaimable));
  if (raw_sreclaimable != 0) {
    total_size += 6;
  }

  // float sUnreclaim = 19;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_sunreclaim = this->_internal_sunreclaim();
  ::uint32_t raw_sunreclaim;
  memcpy(&raw_sunreclaim, &tmp_sunreclaim, sizeof(tmp_sunreclaim));
  if (raw_sunreclaim != 0) {
    total_size += 6;
  }

  // float used_percent = 31;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_used_percent = this->_internal_used_percent();
  ::uint32_t raw_used_percent;
  memcpy(&raw_used_percent, &tmp_used_percent, sizeof(tmp_used_percent));
  if (raw_used_percent != 0) {
    total_size += 6;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MemInfo::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    MemInfo::MergeImpl
};
const ::google::protobuf::Message::ClassData*MemInfo::GetClassData() const { return &_class_data_; }


void MemInfo::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MemInfo*>(&to_msg);
  auto& from = static_cast<const MemInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:monitor.proto.MemInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_total = from._internal_total();
  ::uint32_t raw_total;
  memcpy(&raw_total, &tmp_total, sizeof(tmp_total));
  if (raw_total != 0) {
    _this->_internal_set_total(from._internal_total());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_free = from._internal_free();
  ::uint32_t raw_free;
  memcpy(&raw_free, &tmp_free, sizeof(tmp_free));
  if (raw_free != 0) {
    _this->_internal_set_free(from._internal_free());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_avail = from._internal_avail();
  ::uint32_t raw_avail;
  memcpy(&raw_avail, &tmp_avail, sizeof(tmp_avail));
  if (raw_avail != 0) {
    _this->_internal_set_avail(from._internal_avail());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_buffers = from._internal_buffers();
  ::uint32_t raw_buffers;
  memcpy(&raw_buffers, &tmp_buffers, sizeof(tmp_buffers));
  if (raw_buffers != 0) {
    _this->_internal_set_buffers(from._internal_buffers());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_cached = from._internal_cached();
  ::uint32_t raw_cached;
  memcpy(&raw_cached, &tmp_cached, sizeof(tmp_cached));
  if (raw_cached != 0) {
    _this->_internal_set_cached(from._internal_cached());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_swap_cached = from._internal_swap_cached();
  ::uint32_t raw_swap_cached;
  memcpy(&raw_swap_cached, &tmp_swap_cached, sizeof(tmp_swap_cached));
  if (raw_swap_cached != 0) {
    _this->_internal_set_swap_cached(from._internal_swap_cached());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_active = from._internal_active();
  ::uint32_t raw_active;
  memcpy(&raw_active, &tmp_active, sizeof(tmp_active));
  if (raw_active != 0) {
    _this->_internal_set_active(from._internal_active());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_inactive = from._internal_inactive();
  ::uint32_t raw_inactive;
  memcpy(&raw_inactive, &tmp_inactive, sizeof(tmp_inactive));
  if (raw_inactive != 0) {
    _this->_internal_set_inactive(from._internal_inactive());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_active_anon = from._internal_active_anon();
  ::uint32_t raw_active_anon;
  memcpy(&raw_active_anon, &tmp_active_anon, sizeof(tmp_active_anon));
  if (raw_active_anon != 0) {
    _this->_internal_set_active_anon(from._internal_active_anon());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_inactive_anon = from._internal_inactive_anon();
  ::uint32_t raw_inactive_anon;
  memcpy(&raw_inactive_anon, &tmp_inactive_anon, sizeof(tmp_inactive_anon));
  if (raw_inactive_anon != 0) {
    _this->_internal_set_inactive_anon(from._internal_inactive_anon());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_active_file = from._internal_active_file();
  ::uint32_t raw_active_file;
  memcpy(&raw_active_file, &tmp_active_file, sizeof(tmp_active_file));
  if (raw_active_file != 0) {
    _this->_internal_set_active_file(from._internal_active_file());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_inactive_file = from._internal_inactive_file();
  ::uint32_t raw_inactive_file;
  memcpy(&raw_inactive_file, &tmp_inactive_file, sizeof(tmp_inactive_file));
  if (raw_inactive_file != 0) {
    _this->_internal_set_inactive_file(from._internal_inactive_file());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_dirty = from._internal_dirty();
  ::uint32_t raw_dirty;
  memcpy(&raw_dirty, &tmp_dirty, sizeof(tmp_dirty));
  if (raw_dirty != 0) {
    _this->_internal_set_dirty(from._internal_dirty());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_writeback = from._internal_writeback();
  ::uint32_t raw_writeback;
  memcpy(&raw_writeback, &tmp_writeback, sizeof(tmp_writeback));
  if (raw_writeback != 0) {
    _this->_internal_set_writeback(from._internal_writeback());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_anon_pages = from._internal_anon_pages();
  ::uint32_t raw_anon_pages;
  memcpy(&raw_anon_pages, &tmp_anon_pages, sizeof(tmp_anon_pages));
  if (raw_anon_pages != 0) {
    _this->_internal_set_anon_pages(from._internal_anon_pages());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_mapped = from._internal_mapped();
  ::uint32_t raw_mapped;
  memcpy(&raw_mapped, &tmp_mapped, sizeof(tmp_mapped));
  if (raw_mapped != 0) {
    _this->_internal_set_mapped(from._internal_mapped());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_kreclaimable = from._internal_kreclaimable();
  ::uint32_t raw_kreclaimable;
  memcpy(&raw_kreclaimable, &tmp_kreclaimable, sizeof(tmp_kreclaimable));
  if (raw_kreclaimable != 0) {
    _this->_internal_set_kreclaimable(from._internal_kreclaimable());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_sreclaimable = from._internal_sreclaimable();
  ::uint32_t raw_sreclaimable;
  memcpy(&raw_sreclaimable, &tmp_sreclaimable, sizeof(tmp_sreclaimable));
  if (raw_sreclaimable != 0) {
    _this->_internal_set_sreclaimable(from._internal_sreclaimable());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_sunreclaim = from._internal_sunreclaim();
  ::uint32_t raw_sunreclaim;
  memcpy(&raw_sunreclaim, &tmp_sunreclaim, sizeof(tmp_sunreclaim));
  if (raw_sunreclaim != 0) {
    _this->_internal_set_sunreclaim(from._internal_sunreclaim());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_used_percent = from._internal_used_percent();
  ::uint32_t raw_used_percent;
  memcpy(&raw_used_percent, &tmp_used_percent, sizeof(tmp_used_percent));
  if (raw_used_percent != 0) {
    _this->_internal_set_used_percent(from._internal_used_percent());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MemInfo::CopyFrom(const MemInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:monitor.proto.MemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MemInfo::IsInitialized() const {
  return true;
}

void MemInfo::InternalSwap(MemInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.used_percent_)
      + sizeof(MemInfo::_impl_.used_percent_)
      - PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.total_)>(
          reinterpret_cast<char*>(&_impl_.total_),
          reinterpret_cast<char*>(&other->_impl_.total_));
}

::google::protobuf::Metadata MemInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mem_5finfo_2eproto_getter, &descriptor_table_mem_5finfo_2eproto_once,
      file_level_metadata_mem_5finfo_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace monitor
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
